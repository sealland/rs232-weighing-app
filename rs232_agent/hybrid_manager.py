"""
Hybrid Lightweight Manager for RS232 Scale Client
‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö hybrid ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á online ‡πÅ‡∏•‡∏∞ offline mode
‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏£‡∏∞‡∏ö‡∏ö online ‡πÄ‡∏î‡∏¥‡∏°
"""

import time
import json
import asyncio
import threading
from datetime import datetime
from typing import Dict, List, Optional, Any

class HybridLightweightManager:
    """
    ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö hybrid ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á online ‡πÅ‡∏•‡∏∞ offline mode
    - Online: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ + ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô local
    - Offline: ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô local ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    - Sync: ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö online
    """
    
    def __init__(self, client_gui):
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Hybrid Manager
        
        Args:
            client_gui: ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á GUI ‡∏´‡∏•‡∏±‡∏Å
        """
        self.client_gui = client_gui
        self.is_hybrid_mode = True  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô hybrid mode ‡πÄ‡∏™‡∏°‡∏≠
        self.sync_interval = 5  # sync ‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        self.last_sync_time = 0
        self.sync_running = False
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° sync timer
        self.start_sync_timer()
    
    def start_sync_timer(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sync ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        def sync_timer():
            if self.client_gui.is_running and not self.sync_running:
                self.auto_sync_when_online()
            # ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            if hasattr(self.client_gui, 'root'):
                self.client_gui.root.after(self.sync_interval * 1000, sync_timer)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° timer ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        if hasattr(self.client_gui, 'root'):
            self.client_gui.root.after(self.sync_interval * 1000, sync_timer)
    
    def process_weight_data(self, weight: str, context: Dict[str, Any]) -> bool:
        """
        ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏ö‡∏ö hybrid
        
        Args:
            weight: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
            context: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (branch, scale_pattern, etc.)
            
        Returns:
            bool: True ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, False ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        """
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            weight_data = {
                'weight': weight,
                'timestamp': datetime.now(),
                'context': context,
                'synced': False
            }
            
            if self.client_gui.is_connected:
                # Online Mode: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ + ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô Local
                success = self.send_to_server_immediately(weight_data)
                if success:
                    # ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô local database ‡πÄ‡∏õ‡πá‡∏ô backup
                    self.save_to_local_database(weight_data, synced=True)
                    self.client_gui.log_message(f"‚úÖ Online Mode: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {weight} kg ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    return True
                else:
                    # ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô local database ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà sync
                    self.save_to_local_database(weight_data, synced=False)
                    self.client_gui.log_message(f"‚ö†Ô∏è Online Mode: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô local")
                    return False
            else:
                # Offline Mode: ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô local database ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                self.save_to_local_database(weight_data, synced=False)
                self.client_gui.log_message(f"üì± Offline Mode: ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {weight} kg ‡πÉ‡∏ô local")
                return True
                
        except Exception as e:
            self.client_gui.log_message(f"‚ùå Error processing weight data: {e}")
            return False
    
    def send_to_server_immediately(self, weight_data: Dict[str, Any]) -> bool:
        """
        ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á server ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        
        Args:
            weight_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
            
        Returns:
            bool: True ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, False ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        """
        try:
            if not self.client_gui.websocket or self.client_gui.websocket.closed:
                return False
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ server
            message = {
                "client_id": self.client_gui.client_id_var.get(),
                "weight": weight_data['weight'],
                "timestamp": time.time(),
                "branch": weight_data['context'].get('branch', ''),
                "branch_prefix": self.client_gui.get_branch_prefix(
                    weight_data['context'].get('branch', '')
                ),
                "scale_pattern": weight_data['context'].get('scale_pattern', ''),
                "hybrid_sync": True  # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å hybrid mode
            }
            
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö async
            if hasattr(self.client_gui, 'loop') and self.client_gui.loop:
                asyncio.run_coroutine_threadsafe(
                    self.client_gui.websocket.send(json.dumps(message)),
                    self.client_gui.loop
                )
                return True
            else:
                return False
                
        except Exception as e:
            self.client_gui.log_message(f"Error sending to server: {e}")
            return False
    
    def save_to_local_database(self, weight_data: Dict[str, Any], synced: bool = False):
        """
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô local database
        
        Args:
            weight_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
            synced: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ sync
        """
        try:
            if hasattr(self.client_gui, 'local_data_manager'):
                record_id = self.client_gui.local_data_manager.add_weight_record(
                    weight=weight_data['weight'],
                    branch=weight_data['context'].get('branch', ''),
                    scale_pattern=weight_data['context'].get('scale_pattern', ''),
                    synced=synced
                )
                
                if record_id:
                    self.client_gui.log_message(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô local database: ID {record_id}")
                else:
                    self.client_gui.log_message("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô local database ‡πÑ‡∏î‡πâ")
                    
        except Exception as e:
            self.client_gui.log_message(f"Error saving to local database: {e}")
    
    def auto_sync_when_online(self):
        """Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö online"""
        try:
            if not self.client_gui.is_connected:
                return
            
            current_time = time.time()
            if current_time - self.last_sync_time < self.sync_interval:
                return
            
            self.sync_running = True
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ sync
            if hasattr(self.client_gui, 'local_data_manager'):
                unsynced_data = self.client_gui.local_data_manager.get_unsynced_data()
                
                if unsynced_data:
                    self.client_gui.log_message(f"üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(unsynced_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...")
                    
                    synced_count = 0
                    for record in unsynced_data:
                        if self.sync_single_record(record):
                            synced_count += 1
                    
                    if synced_count > 0:
                        self.client_gui.log_message(f"‚úÖ Sync ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {synced_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                        self.last_sync_time = current_time
                    else:
                        self.client_gui.log_message("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà sync ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á sync
                    pass
            
            self.sync_running = False
            
        except Exception as e:
            self.client_gui.log_message(f"Error in auto sync: {e}")
            self.sync_running = False
    
    def sync_single_record(self, record: tuple) -> bool:
        """
        Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
        
        Args:
            record: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å local database
            
        Returns:
            bool: True ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, False ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        """
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sync
            message = {
                "client_id": self.client_gui.client_id_var.get(),
                "weight": str(record[1]),  # weight
                "timestamp": time.time(),
                "branch": record[4] if record[4] else self.client_gui.branch_var.get(),
                "branch_prefix": self.client_gui.get_branch_prefix(
                    record[4] if record[4] else self.client_gui.branch_var.get()
                ),
                "scale_pattern": record[5] if record[5] else self.client_gui.scale_pattern_var.get(),
                "offline_sync": True,  # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å offline sync
                "original_timestamp": record[2]  # timestamp ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å local
            }
            
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if self.send_to_server_immediately({'weight': message['weight'], 'context': message}):
                # ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤ sync ‡πÅ‡∏•‡πâ‡∏ß
                if hasattr(self.client_gui, 'local_data_manager'):
                    self.client_gui.local_data_manager.mark_as_synced(record[0])
                return True
            else:
                return False
                
        except Exception as e:
            self.client_gui.log_message(f"Error syncing record {record[0]}: {e}")
            return False
    
    def force_sync(self) -> bool:
        """
        ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        
        Returns:
            bool: True ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, False ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        """
        try:
            if not self.client_gui.is_connected:
                self.client_gui.log_message("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ sync ‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ offline")
                return False
            
            self.client_gui.log_message("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° force sync...")
            self.auto_sync_when_online()
            return True
            
        except Exception as e:
            self.client_gui.log_message(f"Error in force sync: {e}")
            return False
    
    def get_hybrid_status(self) -> Dict[str, Any]:
        """
        ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ hybrid mode
        
        Returns:
            Dict: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πà‡∏≤‡∏á‡πÜ
        """
        try:
            if hasattr(self.client_gui, 'local_data_manager'):
                stats = self.client_gui.local_data_manager.get_local_stats()
                
                return {
                    'hybrid_mode': self.is_hybrid_mode,
                    'is_online': self.client_gui.is_connected,
                    'last_sync': self.last_sync_time,
                    'sync_running': self.sync_running,
                    'local_stats': stats
                }
            else:
                return {
                    'hybrid_mode': self.is_hybrid_mode,
                    'is_online': self.client_gui.is_connected,
                    'last_sync': self.last_sync_time,
                    'sync_running': self.sync_running,
                    'local_stats': {'total': 0, 'synced': 0, 'unsynced': 0}
                }
                
        except Exception as e:
            self.client_gui.log_message(f"Error getting hybrid status: {e}")
            return {
                'hybrid_mode': False,
                'is_online': False,
                'last_sync': 0,
                'sync_running': False,
                'local_stats': {'total': 0, 'synced': 0, 'unsynced': 0}
            }
